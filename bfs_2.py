# -*- coding: utf-8 -*-
"""BFS-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Jq3jLxEvobBetBtkQwSq1NDOT9hBfrT

Rotten Oranges
"""

class Solution(object):
    def orangesRotting(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        m = len(grid[0])
        directions = [[1,0] , [0,1], [-1,0], [0,-1]]
        fresh_oranges_count = 0
        queue = []
        time = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1:
                    fresh_oranges_count += 1
                elif grid[i][j] == 2:
                    queue.append([i,j])
        
        while len(queue) != 0:
            length = len(queue)
            for i in range(length):
                coordinates = queue.pop(0)
                for direction in directions:
                    row = coordinates[0] + direction[0]
                    column = coordinates[1] + direction[1]
                    if row >= 0 and row < n and column >= 0 and column < m and grid[row][column] == 1:
                        grid[row][column] = 2
                        fresh_oranges_count -= 1
                        queue.append([row,column])
            time += 1
        if fresh_oranges_count != 0:
            return -1
        return time - 1
                
            
grid = Solution()          
    
print(grid.orangesRotting([[2,1,2,0],[1,0,1,0],[1,1,1,0],[0,0,1,1]]))

"""Employee Importance

BFS
"""

# Definition for Employee.
class Employee(object):
    def __init__(self, id, importance, subordinates):
  
        self.id = id
        self.importance = importance
        self.subordinates = subordinates
class Solution(object):
    def getImportance(self, employees, id):
        """
        :type employees: List[Employee]
        :type id: int
        :rtype: int
         """
        total_importance = 0
        employee = {}
        for emp in employees:
            employee[emp.id] = emp
        queue = []
        queue.append(employee[id])
        while len(queue) != 0:
            emp = queue.pop(0)
            total_importance += emp.importance
            for sub in emp.subordinates:
                queue.append(employee[sub])
        return total_importance
            
       
emp1 = Employee(1,5,[2,3])   
emp2 = Employee(2,3,[])   
emp3 = Employee(3,3,[])     
imp = Solution()
print(imp.getImportance([emp1,emp2,emp3],1))

"""DFS"""

# Definition for Employee.
class Employee(object):
    def __init__(self, id, importance, subordinates):
  
        self.id = id
        self.importance = importance
        self.subordinates = subordinates

class Solution(object):
    def getImportance(self, employees, id):
        """
        :type employees: List[Employee]
        :type id: int
        :rtype: int
        """
        global employee, importance
        importance = [0]
        employee = {}
        for emp in employees:
            employee[emp.id] = emp
        self.totalImportance(id)
        return importance[0]
    def totalImportance(self,emp_id):
        importance[0] += employee[emp_id].importance
        for sub in employee[emp_id].subordinates:
            self.totalImportance(sub)
       
emp1 = Employee(1,5,[2,3])   
emp2 = Employee(2,3,[])   
emp3 = Employee(3,3,[])     
imp = Solution()
print(imp.getImportance([emp1,emp2,emp3],1))

s = 'hello world'
print(s[:1:-3])