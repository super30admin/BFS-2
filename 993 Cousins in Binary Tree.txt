//993. Cousins in Binary Tree


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 //TC O(n) SC O(n) solution by using 1 queue
// Time Complexity : O(n) where n is the number of nodes
// Space Complexity :O(n) where n is the number of nodes
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        Queue<TreeNode>q=new LinkedList<>();
        q.add(root);

        while(!q.isEmpty()){
            int size=q.size();
            boolean x_found=false,y_found=false;
            for(int i=0;i<size;i++){
                TreeNode curr=q.poll();
                if(curr.val==x){
                    x_found=true;
                }
                if(curr.val==y){
                    y_found=true;
                }
                //we will be checking if parent are same or not
                if(curr.left!=null && curr.right!=null){
                    if(curr.left.val ==x && curr.right.val ==y)return false;
                    if(curr.left.val ==y && curr.right.val ==x)return false;
                }
                if(curr.left!=null)q.add(curr.left);
                if(curr.right!=null)q.add(curr.right);

            }
            if(x_found && y_found)return true;
            if(x_found || y_found){return false;}

        }

    return false;
    }
}




 //TC O(n) SC O(n) solution by using 2 queue
// class Solution {
//     public boolean isCousins(TreeNode root, int x, int y) {
//         Queue<TreeNode>q=new LinkedList<>();
//         Queue<TreeNode>pq=new LinkedList<>();
//         q.add(root);
//         pq.add(null);
//         while(!q.isEmpty()){
//             int size=q.size();
//             boolean x_found=false,y_found=false;
//             TreeNode x_parent=null,y_parent=null;
//             for(int i=0;i<size;i++){
//                 TreeNode curr=q.poll();
//                 TreeNode pcurr=pq.poll();
//                 if(curr.val==x){
//                     x_found=true;
//                     x_parent=pcurr;
//                 }
//                 if(curr.val==y){
//                     y_found=true;
//                     y_parent=pcurr;
//                 }
//                 if(curr.left!=null){
//                     q.add(curr.left);
//                     pq.add(curr);
//                 }
//                 if(curr.right!=null){
//                     q.add(curr.right);
//                     pq.add(curr);
//                 }

//             }
//             if(x_found && y_found){
//                 return x_parent!=y_parent;
//             }
//             if(x_found || y_found){return false;}

//         }

//     return false;
//     }
// }



 //DFS
// class Solution {
//     int x_depth,y_depth;
//     TreeNode x_parent,y_parent;
//     public boolean isCousins(TreeNode root, int x, int y) {
//         dfs(root,x,y,0,null);
//         return x_depth==y_depth && x_parent!=y_parent;
//     }
//     private void dfs(TreeNode root,int x,int y,int depth,TreeNode parent){
//         //base
//         if(root==null)return;
//         //logic
//         if(root.val==x){
//             x_depth=depth;
//             x_parent=parent;
//         }
//          if(root.val==y){
//             y_depth=depth;
//             y_parent=parent;
//         }
//         dfs(root.left,x,y,depth+1,root);
//         dfs(root.right,x,y,depth+1,root);
//     }
// }





