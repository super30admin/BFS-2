/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /** Time Complexity - O(N)
     Space Complexity - O(N)
  */
class Solution {

    TreeNode parentX;
    TreeNode parentY;
    int depthX;
    int depthY;

    public boolean isCousins(TreeNode root, int x, int y) {
        if (x == y || root == null) {
            return false;
        }
        dfs(root, 0, x, y, null);
        return (depthX == depthY && parentX != parentY);
    }

    private void dfs(TreeNode root, int depth, int x, int y, TreeNode parent) {

        if (root == null) {
            return;
        }
        
        if (root.val == x) {
            parentX = parent;
            depthX = depth;
        }
        if (root.val == y) {
            parentY = parent;
            depthY = depth;
        }
        dfs(root.right, depth+1, x, y, root);
        dfs(root.left, depth+1, x, y, root);
    }
}
