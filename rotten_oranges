"""
Add all rotten oranges to a queue and do BFS to iterate over 
all the elements in the queue adding neighbours that are fresh oranges.

Edgecases missed : No rotten oranges. No orange matrix.
"""
from collections import deque
class Solution(object):
    def neighbours(self,x,y,M,N) :
        for i,j in [(x-1,y),(x+1,y),(x,y-1),(x,y+1)] :
            if (i >=0) and (i < M ) and (j >=0) and (j < N ) :
                yield i,j
    
    def orangesRotting(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        M = len(grid)
        N = len(grid[0])
        
        queue = deque()
        for i in range(M) :
            for j in range(N):
                if grid[i][j] == 2 :
                    queue.append((i,j))
        
        
        iters = -1
        while queue :
            iters += 1
            size = len(queue)
            for i in range(size) :
                x,y = queue.popleft()        
                for n_x,n_y in self.neighbours(x,y,M,N) :
                    if grid[n_x][n_y] == 1 :
                        queue.append((n_x,n_y))
                        grid[n_x][n_y] = 2
        
        for i in range(M) :
            for j in range(N):
                if grid[i][j] == 1 :
                    return -1
        
        return max(0,iters)
        
