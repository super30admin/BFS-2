{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww28600\viewh15060\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:\
        x_parent, y_parent = 0, 0\
        queue = deque()\
        if not root:\
            return False\
        if x == root.val or y == root.val:\
            return False\
        queue.append(root)\
        \
        while queue:\
            queue_val = []\
            size = len(queue)\
            for i in range(size):\
                temp = queue.popleft()\
                if temp.left and temp.left.val == x:\
                    x_parent = temp.val\
                if temp.left and temp.left.val == y:\
                    y_parent = temp.val\
                    \
                if temp.right and temp.right.val == x:\
                    x_parent = temp.val\
                if temp.right and temp.right.val == y:\
                    y_parent = temp.val\
                \
                if temp.left:\
                    queue.append(temp.left)\
                    queue_val.append(temp.left.val)\
                if temp.right:\
                    queue.append(temp.right)\
                    queue_val.append(temp.right.val)\
            if (x in queue_val and y not in queue_val) or (y in queue_val and x not in queue_val) or ((x in queue_val and y in queue_val) and (x_parent == y_parent)):\
                return False\
            \
        return True\
                }