// Time complexity : O(n)
// Space complexity : O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> rightView;
    public List<Integer> rightSideView(TreeNode root) {
        
        // result
        rightView = new ArrayList<>();
        
        if (root == null){
            
            return rightView;
        }

        Queue<TreeNode> q = new LinkedList<>();
    
        // Add root to the queue
        q.add(root);
        
        while (!q.isEmpty()){
            
            // Compute the size
            int size = q.size();
            
            TreeNode curr =  new TreeNode();
        
            for (int i = 0; i < size; i++){
                
                // Current element 
                curr = q.poll();
            
                // Add left child
                if (curr.left != null){
                    
                    q.add(curr.left);
                }
                
                 // Add right child
                if (curr.right != null){
                    
                    q.add(curr.right);
                }
                
            }
          
            
            // The last element that is polled in the queue will be the last element in that level.
            rightView.add(curr.val);
            
        }
        
        return rightView;
        
    }
    
}