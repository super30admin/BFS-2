// Time Complexity : O(n) - n is the number of tree nodes
// Space Complexity : O(n/2) -> O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no
// Your code here along with comments explaining your approach: I used a BFS approach. Before adding the children to the queue, I check if they are x and y and whether they are siblings. If they are siblings, I return false. Then I keep adding to the queue. If x is found and and y is found at the end of a level, they are cousins. If only one is found at the end of a level then, they are cousins.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root==null) return false;
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size=q.size();
            boolean x_found=false;
            boolean y_found=false;
            for(int i=0;i<size;i++){
                 TreeNode curr=q.poll();
                 if(curr.val==x) x_found=true;
                 if(curr.val==y) y_found=true;
                 if(curr.left!=null && curr.right!=null){
                     if(curr.left.val==x && curr.right.val==y) return false;
                     if(curr.right.val==x && curr.left.val==y) return false;
                 }
                if(curr.left!=null) q.add(curr.left);
                if(curr.right!=null) q.add(curr.right);
            }
            if(x_found ==true && y_found==true) return true;  
            if(x_found ==true || y_found==true) return false;
        }
         return false;
        
    }
}



// Time Complexity : O(n) - n is the number of tree nodes
// Space Complexity : O(h) -> where h is the height of the tree.
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no
// Your code here along with comments explaining your approach: DFS approach. We keep adding to the stack and traverse through all the tree nodes. At the end if both x and y are found and their depths are equal then, we return true.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     int x_depth,y_depth;
     TreeNode x_parent,y_parent;
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root==null) return false;
        dfs(root,null,0,x,y);
        return x_parent!=y_parent && x_depth==y_depth;
    }
    
    public void dfs(TreeNode root, TreeNode parent,int depth,int x,int y){
        //base case
        if(root==null) return;
        
        //logic
        if(root.val==x){
            x_parent=parent;
            x_depth=depth;
        }
        if(root.val==y){
            y_parent=parent;
            y_depth=depth;
        }
        dfs(root.left,root,depth+1,x,y);
        dfs(root.right,root,depth+1,x,y);
        
        
    }
}