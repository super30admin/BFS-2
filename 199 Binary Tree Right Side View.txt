//199. Binary Tree Right Side View

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// Time Complexity :O(n) where n is the number of nodes
// Space Complexity :O(n) where n is the number of nodes


//  //DFS
// class Solution {
//     public List<Integer> rightSideView(TreeNode root) {
//        List<Integer>result=new ArrayList<>();
//        dfs(root,0,result);
//        return result;
//     }
//     private void dfs(TreeNode root,int level,List<Integer>result){
//         if(root==null)return;
//         if(result.size()==level){
//             result.add(root.val);
//         }
//         dfs(root.right,level+1,result);//right call first
//         dfs(root.left,level+1,result);
//     }
// }

 //DFS
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
       List<Integer>result=new ArrayList<>();
       dfs(root,0,result);
       return result;
    }
    private void dfs(TreeNode root,int level,List<Integer>result){
        if(root==null)return;
        if(result.size()==level){
            result.add(root.val);
        }else{
            result.set(level,root.val);
        }
        dfs(root.left,level+1,result);//left call
        dfs(root.right,level+1,result);
  
    }
}



 //BFS
// class Solution {
//     public List<Integer> rightSideView(TreeNode root) {
//         List<Integer> result=new ArrayList<>();
//         if(root==null)return result;
//         Queue<TreeNode> q=new LinkedList<>();
//         q.add(root);
//         while(!q.isEmpty()){
//             int size=q.size();
//             for(int i=0;i<size;i++){
//                 TreeNode curr=q.poll();
//                 if(i==size-1){
//                     result.add(curr.val);
//                 }
//                 if(curr.left!=null)q.add(curr.left);
//                 if(curr.right!=null)q.add(curr.right);
//             }
//         }

//     return result;
        
//     }
// }

