/*
- Add all the rotten oranges to queue
- In queue process all the rotten oranges at that time (size) and go through directions arrays and convert fresh oranges.
- decrease freshcount and for every queue size processed increase minutes
- if any fresh orange left return -1
*/
class Solution {
    public int orangesRotting(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int freshOranges = 0;
        int minutes = 0;
        
        Queue<int[]> queue = new LinkedList<>();
        int dirs[][] = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        
        for(int i=0; i < grid.length; i++) {
            for(int j=0; j < grid[0].length; j++){
             // count freshoranges
                if(grid[i][j] == 1) {
                    freshOranges += 1;
                }
             // add rotten oranges to the queue
                if(grid[i][j] == 2){
                    queue.add(new int[]{i,j});
                }
            }
        }
        
        while(!queue.isEmpty()){
            int size = queue.size();
            
            if (freshOranges == 0) {
                return minutes;
            }
            
            for(int x = 0 ; x < size; x++){
                int[] rotten = queue.poll();
                
                for(int[] dir: dirs){
                    int r = rotten[0] + dir[0];
                    int c = rotten[1] + dir[1];
                    
                    //change fresh orange to rotten
                    // freshOranges --
                    // add to queue
                    if(r >= 0 && c >= 0 && r < grid.length && c < grid[0].length && grid[r][c] == 1){
                        grid[r][c] = 2;
                        freshOranges -= 1;
                        queue.add(new int[]{r,c});
                    }
                }
            }
            minutes += 1; //increase minutes for all the rotten oranges at once in the queue
        }
        
        return freshOranges > 0 ? -1 : minutes;
    }
}
