/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    //993. Cousins in Binary Tree
    //Time complexity : O(n)
    //Space compelxity : O(n)
    public boolean isCousins(TreeNode root, int x, int y) {
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
       
        
        while(!q.isEmpty()){
            
            int size = q.size();
             boolean x_found =false;
             boolean y_found = false;
            
            for(int i =0;i<size;i++){
                TreeNode current = q.poll();
                
                if(current.val ==x)
                    x_found = true;
                if(current.val == y)
                    y_found = true;
                
                if(current.left!=null && current.right!=null){
                     
                if(current.left.val ==x && current.right.val ==y)
                    return false;
                if(current.left.val == y && current.right.val ==x)
                    return false;
                }
               
                if(current.left!=null)
                    q.add(current.left);
                if(current.right!=null)
                    q.add(current.right);
                
            }
            if(x_found && y_found )
                return true;
            if(x_found || y_found)
                return false;
        }
        return false;
        
    }
}