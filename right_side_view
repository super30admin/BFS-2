// Time Complexity : O(N)
// Space Complexity : O(N)  // recursive stack
// Did this code successfully run in leetcode : Yes
// Any problems faced : No

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// DFS
class Solution {
public:
    vector<int> result;
    vector<int> rightSideView(TreeNode* root) {
        if(root == NULL) return result;
        dfs(root, 0);
        return result;
    }

    void dfs(TreeNode* root, int depth) {
        if(root == NULL) return;
        if(result.size() == depth) {
            result.push_back(root -> val);  // only if element is not present
        }
        dfs(root -> right, depth + 1);  // right side view -> go to right first
        dfs(root -> left, depth + 1);
    }

    // If left recursive call is done first that result vector should be overwritten
};