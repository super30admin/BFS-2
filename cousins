//time-complexity - o(n)
//space complexity - o(n)
//ran on leetcode - yes
public boolean isCousins(TreeNode root, int x, int y) {
        
        if(root == null) return false;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()) {
            int size = q.size();
            boolean x_found = false,y_found = false;
            
            for(int i= 0; i< size; i++){
            	TreeNode curr = q.poll();
                //if value found set the boolean as true
                if(curr.val == x) x_found = true;
                if(curr.val == y) y_found = true;
                //check if x and y are siblings 
                if(curr.left != null && curr.right != null){
                    if(curr.left.val == x && curr.right.val == y) return false;
                    if(curr.left.val == y && curr.right.val == x) return false;
                }
                //add to queue for next iteration 
                if(curr.left != null) q.add(curr.left);
                if(curr.right != null) q.add(curr.right);
            }
            //both found at same level and they are not siblings return true
            if(x_found && y_found) return true;
            //if one of the element found at this level means they are not cousins return false
            if(x_found || y_found) return false;
        }
        
        return false;
    }
    
    //DFS
    //time-complexity - o(n)
	//space complexity - o(h) aux
	//ran on leetcode - yes
    TreeNode x_parent,y_parent;
    int x_level,y_level;
    public boolean isCousins(TreeNode root, int x, int y) {
        
        if(root == null) return false;
        dfs(root,null,0,x,y);
        return x_parent != y_parent && x_level == y_level;
    }
    
    private void dfs(TreeNode root, TreeNode parent, int level, int x, int y) {
        //base
        if(root == null) return;
        //logic
        if(root.val == x) {
            x_parent = parent;
            x_level = level;
        }
        if(root.val == y) {
            y_parent = parent;
            y_level = level;
        }
        dfs(root.left,root,level+1,x,y);
        dfs(root.right,root,level+1,x,y);
    }  