//bfs

//TIMECOMPLEXITY O(n)
//SPACECOMPLEXITY O(n)


class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root == null)return result;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i < size; i++){
                 TreeNode curr = q.poll();
                if(i == size-1){
                result.add(curr.val);
                }
            if(curr.left != null)q.add(curr.left);
            if(curr.right != null)q.add(curr.right);
            }
        }
        return result;
    }
}

//DFS
//TIMECOMPLEXITY O(n)
//SPACECOMPLEXITY O(n)

class Solution {
     List<Integer> result;
    public List<Integer> rightSideView(TreeNode root) {
        result = new ArrayList<>();
        if(root == null)return result;

        dfs(root,0);
        return result;      
    }

    private void dfs(TreeNode root, int depth){
        //base
        if(root == null)return;


        //logic

        if(depth == result.size()){
            result.add(root.val);
        }

        dfs(root.right,depth+1);
        dfs(root.left,depth+1);
    }
}
