// Time Complexity : bfs - O(n) dfs(n)
// Space Complexity : bfs - O(n) n - number of elements in a level dfs - O(h) height of tree
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
DFS  level == result.size add
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> result;
    public List<Integer> rightSideView(TreeNode root) {
        result = new ArrayList<>();
        
        if(root == null)
            return result;
        
        dfs(root, 0);
        return result;
    }
    
    private void dfs(TreeNode root, int level)
    {
        if(root == null)
            return;
        
        if(level == result.size())
            result.add(root.val);
        
        if(root.right != null)
            dfs(root.right, level+1);
        
        if(root.left != null)
            dfs(root.left, level+1);
    }
}

BFS- 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        
        if(root == null)
            return result;
        
        //result.add(root.val);
        
        Queue<TreeNode> bfsQ = new LinkedList<>();
        bfsQ.add(root);
        while(!bfsQ.isEmpty())
        {
            int size = bfsQ.size();
            for(int i=0; i<size; i++)
            {
                TreeNode curr = bfsQ.poll();
                
                if(i == size-1)
                    result.add(curr.val);
                
                if(curr.left != null)
                    bfsQ.add(curr.left);
                
                if(curr.right != null)
                    bfsQ.add(curr.right);
                
            }
        }
        
        return result;
            
        
    }
}
