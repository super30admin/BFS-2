//https://leetcode.com/problems/binary-tree-right-side-view/
//DFS
//time - O(n)
//space - O(h) - height of tree
class Solution {
     List<Integer> result;
    public List<Integer> rightSideView(TreeNode root) {
        result = new ArrayList<>();
        if(root == null) return result;
        
        dfs(root ,0);
        
       
      return result;
    }
    
    private void dfs(TreeNode root , int lvl)
    {
        //base
        if(root == null) return;
        //logic
        if(result.size() == lvl)
        {
            result.add(root.val);
        }
        
        dfs(root.right , lvl+1);
        dfs(root.left , lvl+1);
        
    }
}


//BFS
//time -O(n)
//space -O(n)
class Solution {
    
    public List<Integer> rightSideView(TreeNode root) {
        
        if(root == null ) return new ArrayList<>();
        List<Integer> result = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty())
        {
            int size = q.size();
             for(int i =0 ;i<size;i++)
            {
               TreeNode curr = q.poll();
                 if(i == size-1)
                 {
               result.add(curr.val);
                 }
                 
               
                 if(curr.left != null)
               {    
                   q.add(curr.left);
               }
                 if(curr.right != null)
               {
                   q.add(curr.right);
               }
             }
            
            
        }
        
      return result;
    }
    
}