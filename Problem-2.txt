//https://leetcode.com/problems/cousins-in-binary-tree/
// Time Complexity :O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
//DFS
class Solution {
    int x_lvl, y_lvl;
    TreeNode  x_parent ,y_parent;
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null) return false;
        dfs(root , 0 , null , x,y);
        
        return x_lvl == y_lvl && x_parent != y_parent;
        
    }
    
    private void dfs(TreeNode root , int lvl , TreeNode parent , int x, int y){
        
        //base
        if(root == null) return;
        //logic
        
        if(root.val ==x)
        {
            x_lvl = lvl;
            x_parent = parent;
        }
        if(root.val ==y)
        {
            y_lvl = lvl;
            y_parent = parent;
        }
        dfs(root.left ,lvl+1 , root , x,y);
        dfs(root.right ,lvl+1 , root , x,y);
    }
}

//https://leetcode.com/problems/cousins-in-binary-tree/
// Time Complexity :O(n)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
//BFS

class Solution {  
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null) return false;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty())
        {
            int size = q.size();
            
            boolean x_found = false;
            boolean y_found = false;
            
            for(int i =0 ;i<size;i++)
            {
                TreeNode curr = q.poll();
                if(curr.val == x)
                {
                    x_found = true;
                }
                if(curr.val == y)
                {
                    y_found = true;
                }
                
                if(curr.left !=null && curr.right != null)
                {
                    if(curr.left.val == x && curr.right.val == y)
                    {
                        return false;
                    }
                    if(curr.left.val == y && curr.right.val == x)
                    {
                        return false;
                    }
                }
                if(curr.left !=null)
                {
                    q.add(curr.left);
                }
                
                if(curr.right != null)
                {
                    q.add(curr.right);
                }
            }
            if(x_found && y_found) return true;
            if(x_found || y_found) return false;
        }
      return false; 
    }   
   
    
}
