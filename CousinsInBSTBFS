// Time Complexity: O(n): num of nodes in tree
// Space Complexity: O(h) h: height of the tree
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null) return false;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        while(!q.isEmpty()){
            int size = q.size();
            // maintain 2 booleans at every level, reset at every level
            boolean x_found = false;
            boolean y_found = false;
            for(int i = 0 ; i < size ; i++){
                TreeNode curr = q.poll();
                if(curr.val == x){
                    x_found = true;
                }
                if(curr.val == y){
                    y_found = true;
                }
                if(curr.left != null && curr.right!=null){
                    // checking if x and y are children of the same parent
                    if(curr.left.val == x && curr.right.val == y){
                        return false;
                    }
                    if(curr.left.val == y && curr.right.val == x){
                        return false;
                    }
                }
                if(curr.left != null) q.add(curr.left);
                if(curr.right != null) q.add(curr.right);

            }
            if(x_found && y_found) return true;
            if(x_found || y_found) return false; // if one is found and the other isn't found, the next level isn't processed, more efficient

        }
        return false;
    }
}
