/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
      List<Integer> result = new ArrayList<>();
      if(root==null) return result;
      Queue<TreeNode> queue = new LinkedList<>();
      queue.add(root);

       while(!queue.isEmpty()){
            int size= queue.size();
           for(int i=0;i<size;i++){
               TreeNode node = queue.poll();
               if(i==size-1){
                  result.add(node.val); 
               }
               if(node.left!=null)
                   queue.add(node.left);
               if(node.right!=null)
                   queue.add(node.right);
           }
       }
       return result;  
    }
}

//Time Complexity : O(n)
//Space Complexity: O(n) n: no of nodes at each level 
//Approach : Used BFS method, since the right most node of the tree will be added at the end of the end so everytime we reach the eand of queue add the element to result
